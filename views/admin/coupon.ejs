<%- include("../partials/admin/header") %>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
  :root {
    --primary-color: #007bff;
    --secondary-color: #6c757d;
    --success-color: #28a745;
    --danger-color: #dc3545;
    --warning-color: #ffc107;
    --info-color: #17a2b8;
    --white: #ffffff;
    --light-gray: #e9ecef;
    --shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
    --border-radius: 8px;
    --transition: all 0.3s ease;
  }

  .main-content {
    padding: 20px;
    background-color: #f8f9fa;
    min-height: calc(100vh - 60px); /* Adjust based on header height */
  }

  .content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
    gap: 10px;
  }

  .content-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: var(--secondary-color);
  }

  .error-message, .editError-message {
    color: var(--danger-color);
    margin-top: 5px;
    font-size: 0.875rem;
    display: block;
  }

  .form-label {
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--secondary-color);
  }

  .form-control {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid var(--light-gray);
    border-radius: 5px;
    box-sizing: border-box;
    transition: var(--transition);
  }

  .form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
  }

  .d-grid {
    margin-top: 20px;
  }

  .btn-primary {
    background-color: var(--primary-color) !important;
    color: var(--white) !important;
    border: 1px solid var(--primary-color) !important;
    border-radius: 5px;
    padding: 10px 20px !important;
    transition: var(--transition);
  }

  .btn-primary:hover {
    background-color: #0056b3 !important;
    border-color: #0056b3 !important;
  }

  .btn-warning, .btn-danger {
    padding: 8px 16px !important;
    border-radius: 5px !important;
    transition: var(--transition);
  }

  .coupon-cards {
    display: none;
    padding: 0 10px;
  }

  .coupon-card {
    background-color: var(--white);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    margin: 0 0 15px 0;
    padding: 15px;
  }

  .coupon-card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--light-gray);
  }

  .coupon-card-body {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 10px;
    margin-bottom: 15px;
  }

  .coupon-card-item {
    display: flex;
    flex-direction: column;
  }

  .coupon-card-label {
    font-size: 0.8rem;
    color: var(--secondary-color);
    margin-bottom: 5px;
    font-weight: 500;
  }

  .coupon-card-value {
    font-size: 0.95rem;
    font-weight: 600;
    color: #343a40;
  }

  .coupon-card-actions {
    padding-top: 10px;
    border-top: 1px solid var(--light-gray);
    display: flex;
    gap: 10px;
  }

  .table-responsive table {
    width: 100% !important;
    border-collapse: collapse !important;
  }

  .table-hover tbody tr:hover {
    background-color: #f1f3f5;
  }

  .badge {
    padding: 6px 12px;
    border-radius: 12px;
  }

  /* Pagination styles */
  .pagination-container {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    width: 100% !important;
    margin: 20px 0 !important;
    padding: 0 15px !important;
    box-sizing: border-box !important;
  }

  .pagination-container nav {
    display: inline-flex !important;
    justify-content: center !important;
  }

  .pagination-container .pagination {
    margin: 0 !important;
    flex-wrap: wrap !important;
    justify-content: center !important;
  }

  .pagination-container .page-item {
    margin: 0 3px !important;
  }

  .pagination-container .page-link {
    color: var(--primary-color) !important;
    border-radius: 4px !important;
    padding: 6px 12px !important;
    transition: var(--transition);
  }

  .pagination-container .page-item.active .page-link {
    background-color: var(--primary-color) !important;
    border-color: var(--primary-color) !important;
    color: var(--white) !important;
  }

  .pagination-container .page-link:hover {
    background-color: #e9ecef !important;
    border-color: var(--light-gray) !important;
  }

  .modal-body .form-control {
    margin-bottom: 15px !important;
  }

  .modal-body .mb-4 {
    margin-bottom: 1rem !important;
  }

  @media screen and (max-width: 991px) {
    .table-responsive {
      overflow-x: auto;
    }
    .content-header {
      flex-direction: column;
      align-items: flex-start !important;
      gap: 15px;
    }
    .content-header .btn {
      width: 100%;
      max-width: 200px;
    }
  }

  @media screen and (max-width: 767px) {
    .main-content {
      padding: 15px;
    }
    .table-view {
      display: none;
    }
    .coupon-cards {
      display: block;
    }
    .pagination-container {
      padding: 0 10px !important;
    }
  }
</style>

<main class="main-content">
  <section class="container-fluid">
    <div class="content-header">
      <h2 class="content-title">Coupons</h2>
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal" aria-label="Add Coupon">
        Add Coupon
      </button>
    </div>

    <!-- Table View (Desktop) -->
    <div class="card table-view">
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-hover">
            <thead class="table-dark">
              <tr>
                <th>Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Offer</th>
                <th>Minimum Price</th>
                <th>Status</th>
                <th>Edit/Delete</th>
              </tr>
            </thead>
            <tbody>
              <% if (coupons.length === 0) { %>
                <tr>
                  <td colspan="7" class="text-center">No coupons available</td>
                </tr>
              <% } else { %>
                <% coupons.forEach(coupon => { %>
                  <tr>
                    <td class="text-start"><%= coupon.name %></td>
                    <td class="text-start">
                      <%= new Date(coupon.createdOn).toLocaleDateString("en-GB", { day: "2-digit", month: "long", year: "numeric" }) %>
                    </td>
                    <td class="text-start">
                      <%= new Date(coupon.expireOn).toLocaleDateString("en-GB", { day: "2-digit", month: "long", year: "numeric" }) %>
                    </td>
                    <td class="text-start">
                      <% if (coupon.discountPercentage > 0) { %>
                        <%= coupon.discountPercentage %>%
                      <% } else { %>
                        ₹<%= coupon.offerPrice %>
                      <% } %>
                    </td>
                    <td class="text-start"><%= coupon.minimumPrice %></td>
                    <td>
                      <% if (new Date(coupon.createdOn) < Date.now() && new Date(coupon.expireOn) > Date.now()) { %>
                        <span class="badge bg-success text-white">Active</span>
                      <% } else { %>
                        <span class="badge bg-danger text-white">Inactive</span>
                      <% } %>
                    </td>
                    <td class="text-start">
                      <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#editCouponModal<%= coupon._id %>" aria-label="Edit Coupon">
                        Edit
                      </button>
                      <button onclick="confirmDelete('<%= coupon._id %>')" class="btn btn-danger btn-sm" aria-label="Delete Coupon">
                        Delete
                      </button>
                    </td>
                  </tr>
                <% }) %>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Card View (Mobile) -->
    <div class="coupon-cards">
      <% if (coupons.length === 0) { %>
        <div class="text-center py-4">No coupons available</div>
      <% } else { %>
        <% coupons.forEach(coupon => { %>
          <div class="coupon-card">
            <div class="coupon-card-header">
              <div class="fw-bold fs-5"><%= coupon.name %></div>
              <div>
                <% if (new Date(coupon.createdOn) < Date.now() && new Date(coupon.expireOn) > Date.now()) { %>
                  <span class="badge bg-success text-white">Active</span>
                <% } else { %>
                  <span class="badge bg-danger text-white">Inactive</span>
                <% } %>
              </div>
            </div>
            <div class="coupon-card-body">
              <div class="coupon-card-item">
                <div class="coupon-card-label">Created On</div>
                <div class="coupon-card-value">
                  <%= new Date(coupon.createdOn).toLocaleDateString("en-GB", { day: "2-digit", month: "long", year: "numeric" }) %>
                </div>
              </div>
              <div class="coupon-card-item">
                <div class="coupon-card-label">Expire On</div>
                <div class="coupon-card-value">
                  <%= new Date(coupon.expireOn).toLocaleDateString("en-GB", { day: "2-digit", month: "long", year: "numeric" }) %>
                </div>
              </div>
              <div class="coupon-card-item">
                <div class="coupon-card-label">Offer</div>
                <div class="coupon-card-value">
                  <% if (coupon.discountPercentage > 0) { %>
                    <%= coupon.discountPercentage %>%
                  <% } else { %>
                    ₹<%= coupon.offerPrice %>
                  <% } %>
                </div>
              </div>
              <div class="coupon-card-item">
                <div class="coupon-card-label">Minimum Price</div>
                <div class="coupon-card-value"><%= coupon.minimumPrice %></div>
              </div>
            </div>
            <div class="coupon-card-actions">
              <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#editCouponModal<%= coupon._id %>" style="flex: 1;" aria-label="Edit Coupon">
                Edit
              </button>
              <button onclick="confirmDelete('<%= coupon._id %>')" class="btn btn-danger" style="flex: 1;" aria-label="Delete Coupon">
                Delete
              </button>
            </div>
          </div>
        <% }) %>
      <% } %>
    </div>

    <!-- Edit Modals -->
    <% coupons.forEach(coupon => { %>
      <div class="modal fade" id="editCouponModal<%= coupon._id %>" tabindex="-1" aria-labelledby="editCouponLabel<%= coupon._id %>" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editCouponLabel<%= coupon._id %>">Edit Coupon</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form class="edit-Coupon-form" data-id="<%= coupon._id %>">
                <div class="mb-3">
                  <label for="couponName<%= coupon._id %>" class="form-label">Coupon Name</label>
                  <input type="text" class="form-control" id="couponName<%= coupon._id %>" name="name" value="<%= coupon.name %>" />
                  <div id="couponNameError<%= coupon._id %>" class="editError-message"></div>
                </div>
                <div class="mb-3">
                  <label for="couponCreateOn<%= coupon._id %>" class="form-label">Created On</label>
                  <input type="date" class="form-control" id="couponCreateOn<%= coupon._id %>" name="createdOn" value="<%= new Date(coupon.createdOn).toLocaleDateString('en-CA') %>" readonly />
                  <div id="startDateError<%= coupon._id %>" class="editError-message"></div>
                </div>
                <div class="mb-3">
                  <label for="couponExpireOn<%= coupon._id %>" class="form-label">Expire On</label>
                  <input type="date" class="form-control" id="couponExpireOn<%= coupon._id %>" name="expireOn" value="<%= new Date(coupon.expireOn).toLocaleDateString('en-CA') %>" />
                  <div id="expireDateError<%= coupon._id %>" class="editError-message"></div>
                </div>
                <div class="mb-3">
                  <label for="discountType<%= coupon._id %>" class="form-label">Discount Type</label>
                  <select id="discountType<%= coupon._id %>" name="discountType" class="form-control">
                    <option value="" disabled>Select Discount Type</option>
                    <option value="offerPrice" <%= coupon.discountPercentage > 0 ? '' : 'selected' %>>Offer Price</option>
                    <option value="offerPercentage" <%= coupon.discountPercentage > 0 ? 'selected' : '' %>>Offer Percentage</option>
                  </select>
                  <div id="discountTypeError<%= coupon._id %>" class="editError-message"></div>
                </div>
                <div id="offerPriceSection<%= coupon._id %>" class="mb-3" style="display: <%= coupon.discountPercentage > 0 ? 'none' : 'block' %>;">
                  <label for="offerPrice<%= coupon._id %>" class="form-label">Offer Price</label>
                  <input type="number" class="form-control" id="offerPrice<%= coupon._id %>" name="offerPrice" value="<%= coupon.offerPrice %>" min="0" step="1" />
                  <div id="offerPriceError<%= coupon._id %>" class="editError-message"></div>
                </div>
                <div id="offerPercentageSection<%= coupon._id %>" class="mb-3" style="display: <%= coupon.discountPercentage > 0 ? 'block' : 'none' %>;">
                  <div class="mb-3">
                    <label for="discountPercentage<%= coupon._id %>" class="form-label">Discount Percentage</label>
                    <input type="number" class="form-control" id="discountPercentage<%= coupon._id %>" name="discountPercentage" value="<%= coupon.discountPercentage || '' %>" min="1" max="99" step="1" />
                    <div id="discountPercentageError<%= coupon._id %>" class="editError-message"></div>
                  </div>
                  <div class="mb-3">
                    <label for="maxDiscountAmount<%= coupon._id %>" class="form-label">Max Discount Amount</label>
                    <input type="number" class="form-control" id="maxDiscountAmount<%= coupon._id %>" name="maxDiscountAmount" value="<%= coupon.maxDiscountAmount || '' %>" min="0" step="1" />
                    <div id="maxDiscountAmountError<%= coupon._id %>" class="editError-message"></div>
                  </div>
                </div>
                <div class="mb-3">
                  <label for="minimumPrice<%= coupon._id %>" class="form-label">Minimum Price</label>
                  <input type="number" class="form-control" id="minimumPrice<%= coupon._id %>" name="minimumPrice" value="<%= coupon.minimumPrice %>" min="0" step="1" />
                  <div id="minimumPriceError<%= coupon._id %>" class="editError-message"></div>
                </div>
                <button type="submit" class="btn btn-primary">Update Coupon</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    <% }) %>

    <!-- Pagination -->
    <div class="pagination-container">
      <nav aria-label="Page navigation">
        <ul class="pagination pagination-sm flex-wrap">
          <% if (currentPage > 1) { %>
            <li class="page-item">
              <a href="?page=<%= currentPage - 1 %>" class="page-link" aria-label="Previous">
                « <span class="d-none d-sm-inline">Previous</span>
              </a>
            </li>
          <% } %>
          <% for (let i = 1; i <= totalPages; i++) { %>
            <% if (i === currentPage) { %>
              <li class="page-item active">
                <span class="page-link"><%= i %></span>
              </li>
            <% } else { %>
              <li class="page-item">
                <a href="?page=<%= i %>" class="page-link"><%= i %></a>
              </li>
            <% } %>
          <% } %>
          <% if (currentPage < totalPages) { %>
            <li class="page-item">
              <a href="?page=<%= currentPage + 1 %>" class="page-link" aria-label="Next">
                <span class="d-none d-sm-inline">Next</span> »
              </a>
            </li>
          <% } %>
        </ul>
      </nav>
    </div>
  </section>
</main>

<!-- Add Coupon Modal -->
<div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addCouponModalLabel">Add Coupon</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addCouponForm" onsubmit="return validateAddCouponForm(event)">
          <div class="mb-4">
            <label for="coupon-name" class="form-label">Coupon Name</label>
            <input type="text" id="coupon-name" name="couponName" placeholder="Type here" class="form-control" />
            <div id="error-coupon-name" class="error-message"></div>
          </div>
          <div class="mb-4">
            <label for="startingDate" class="form-label">Start Date</label>
            <input type="date" name="startDate" class="form-control" required id="startingDate" />
            <div id="error-start-date" class="error-message"></div>
          </div>
          <div class="mb-4">
            <label for="expiringDate" class="form-label">End Date</label>
            <input type="date" name="endDate" class="form-control" id="expiringDate" />
            <div id="error-end-date" class="error-message"></div>
          </div>
          <div class="mb-4">
            <label for="discountType" class="form-label">Discount Type</label>
            <select id="discountType" name="discountType" class="form-control">
              <option value="" disabled selected>Select Discount Type</option>
              <option value="offerPrice">Offer Price</option>
              <option value="offerPercentage">Offer Percentage</option>
            </select>
            <div id="error-discount-type" class="error-message"></div>
          </div>
          <div id="offerPriceSection" class="mb-4" style="display: none;">
            <label for="offer-price" class="form-label">Offer Price</label>
            <input type="number" name="offerPrice" id="offer-price" placeholder="Type here" class="form-control" min="0" step="1" />
            <div id="error-offer-price" class="error-message"></div>
          </div>
          <div id="offerPercentageSection" class="mb-4" style="display: none;">
            <div class="mb-4">
              <label for="discount-percentage" class="form-label">Discount Percentage</label>
              <input type="number" name="discountPercentage" id="discount-percentage" placeholder="Enter percentage" class="form-control" min="1" max="99" step="1" />
              <div id="error-discount-percentage" class="error-message"></div>
            </div>
            <div class="mb-4">
              <label for="max-discount-amount" class="form-label">Max Discount Amount</label>
              <input type="number" name="maxDiscountAmount" id="max-discount-amount" placeholder="Type here" class="form-control" min="0" step="1" />
              <div id="error-max-discount-amount" class="error-message"></div>
            </div>
          </div>
          <div class="mb-4">
            <label for="minimum-price" class="form-label">Minimum Price</label>
            <input type="number" name="minimumPrice" id="minimum-price" placeholder="Type here" class="form-control" min="0" step="1" />
            <div id="error-minimum-price" class="error-message"></div>
          </div>
          <div class="d-grid">
            <button class="btn btn-primary" type="submit">Add Coupon</button>
          </div>
          <div id="err-msg" class="error-message"></div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
  // Utility functions for error messages
  function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.textContent = message;
    errorElement.style.display = "block";
  }

  function clearErrorMessages() {
    const errorElements = document.querySelectorAll(".error-message, .editError-message");
    errorElements.forEach(element => {
      element.textContent = "";
      element.style.display = "none";
    });
  }

  // Set default start date
  function setDefaultStartDate() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, "0");
    const day = String(today.getDate()).padStart(2, "0");
    const startDateInput = document.getElementById("startingDate");
    startDateInput.value = `${year}-${month}-${day}`;
    startDateInput.min = `${year}-${month}-${day}`;
  }

  // Toggle discount type sections for Add Coupon
  document.getElementById('discountType').addEventListener('change', function () {
    const offerPriceSection = document.getElementById('offerPriceSection');
    const offerPercentageSection = document.getElementById('offerPercentageSection');
    const offerPriceInput = document.querySelector('input[name="offerPrice"]');
    const discountPercentageInput = document.querySelector('input[name="discountPercentage"]');
    const maxDiscountAmountInput = document.querySelector('input[name="maxDiscountAmount"]');

    if (this.value === 'offerPrice') {
      offerPriceSection.style.display = 'block';
      offerPercentageSection.style.display = 'none';
      discountPercentageInput.value = '';
      maxDiscountAmountInput.value = '';
    } else if (this.value === 'offerPercentage') {
      offerPriceSection.style.display = 'none';
      offerPercentageSection.style.display = 'block';
      offerPriceInput.value = '';
    } else {
      offerPriceSection.style.display = 'none';
      offerPercentageSection.style.display = 'none';
      offerPriceInput.value = '';
      discountPercentageInput.value = '';
      maxDiscountAmountInput.value = '';
    }
  });

  // Toggle discount type sections for Edit Coupon
  document.querySelectorAll('[id^="discountType"]').forEach(dropdown => {
    dropdown.addEventListener('change', function () {
      const couponId = this.id.replace('discountType', '');
      const offerPriceSection = document.getElementById(`offerPriceSection${couponId}`);
      const offerPercentageSection = document.getElementById(`offerPercentageSection${couponId}`);
      const offerPriceInput = document.getElementById(`offerPrice${couponId}`);
      const discountPercentageInput = document.getElementById(`discountPercentage${couponId}`);
      const maxDiscountAmountInput = document.getElementById(`maxDiscountAmount${couponId}`);

      if (this.value === 'offerPrice') {
        offerPriceSection.style.display = 'block';
        offerPercentageSection.style.display = 'none';
        discountPercentageInput.value = '';
        maxDiscountAmountInput.value = '';
      } else if (this.value === 'offerPercentage') {
        offerPriceSection.style.display = 'none';
        offerPercentageSection.style.display = 'block';
        offerPriceInput.value = '';
      } else {
        offerPriceSection.style.display = 'none';
        offerPercentageSection.style.display = 'none';
        offerPriceInput.value = '';
        discountPercentageInput.value = '';
        maxDiscountAmountInput.value = '';
      }
    });
  });

  // Validate Add Coupon form
  function validateAddCouponForm(event) {
    event.preventDefault();
    clearErrorMessages();

    const form = document.getElementById("addCouponForm");
    const couponName = form.elements["couponName"].value.trim();
    const startDate = form.elements["startDate"].value;
    const endDate = form.elements["endDate"].value;
    const discountType = form.elements["discountType"].value;
    const offerPrice = parseFloat(form.elements["offerPrice"].value);
    const discountPercentage = parseFloat(form.elements["discountPercentage"].value);
    const maxDiscountAmount = parseFloat(form.elements["maxDiscountAmount"].value);
    const minimumPrice = parseFloat(form.elements["minimumPrice"].value);

    let isValid = true;

    if (!couponName) {
      displayErrorMessage("error-coupon-name", "Coupon name is required");
      isValid = false;
    } else if (!/^[A-Za-z0-9 ]{3,50}$/.test(couponName)) {
      displayErrorMessage("error-coupon-name", "Coupon name must be alphanumeric (3-50 characters)");
      isValid = false;
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const startDateObj = new Date(startDate);
    const endDateObj = new Date(endDate);

    if (!startDate) {
      displayErrorMessage("error-start-date", "Start date is required");
      isValid = false;
    } else if (startDateObj < today) {
      displayErrorMessage("error-start-date", "Start date must be today or later");
      isValid = false;
    }

    if (!endDate) {
      displayErrorMessage("error-end-date", "End date is required");
      isValid = false;
    } else if (endDateObj <= startDateObj) {
      displayErrorMessage("error-end-date", "End date must be after start date");
      isValid = false;
    }

    if (!discountType) {
      displayErrorMessage("error-discount-type", "Please select a discount type");
      isValid = false;
    }

    if (discountType === "offerPrice") {
      if (isNaN(offerPrice) || offerPrice <= 0) {
        displayErrorMessage("error-offer-price", "Offer price must be a positive number");
        isValid = false;
      }
    } else if (discountType === "offerPercentage") {
      if (isNaN(discountPercentage) || discountPercentage < 1 || discountPercentage > 99) {
        displayErrorMessage("error-discount-percentage", "Discount percentage must be between 1 and 99");
        isValid = false;
      }
      if (isNaN(maxDiscountAmount) || maxDiscountAmount <= 0) {
        displayErrorMessage("error-max-discount-amount", "Maximum discount must be a positive number");
        isValid = false;
      }
    }

    if (isNaN(minimumPrice) || minimumPrice <= 0) {
      displayErrorMessage("error-minimum-price", "Minimum price must be positive");
      isValid = false;
    } else {
      if (discountType === "offerPercentage" && !isNaN(maxDiscountAmount) && minimumPrice < maxDiscountAmount) {
        displayErrorMessage("error-minimum-price", "Minimum price cannot be less than max discount amount");
        isValid = false;
      }
      if (discountType === "offerPrice" && !isNaN(offerPrice) && minimumPrice < offerPrice) {
        displayErrorMessage("error-minimum-price", "Minimum price cannot be less than offer price");
        isValid = false;
      }
    }

    if (isValid) {
      const formData = new FormData(form);
      fetch("/admin/coupon", {
        method: "POST",
        body: new URLSearchParams(formData),
        headers: { "Content-Type": "application/x-www-form-urlencoded" }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            title: "Success!",
            text: "Coupon added successfully!",
            icon: "success",
            confirmButtonText: "Okay",
            timer: 1500,
            timerProgressBar: true
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: "Error",
            text: data.message,
            icon: "error",
            confirmButtonText: "Ok",
            timer: 2000,
            timerProgressBar: true
          });
        }
      })
      .catch(error => {
        console.error("Error adding coupon:", error);
        displayErrorMessage("err-msg", "Error: Could not reach the server.");
      });
    }

    return isValid;
  }

  // Validate Edit Coupon form
  function validateEditCouponForm(form) {
    clearErrorMessages();

    const couponId = form.getAttribute("data-id");
    const couponName = form.elements["name"].value.trim();
    const createdOn = form.elements["createdOn"].value;
    const expireOn = form.elements["expireOn"].value;
    const discountType = form.elements["discountType"].value;
    const offerPrice = parseFloat(form.elements["offerPrice"].value);
    const discountPercentage = parseFloat(form.elements["discountPercentage"].value);
    const maxDiscountAmount = parseFloat(form.elements["maxDiscountAmount"].value);
    const minimumPrice = parseFloat(form.elements["minimumPrice"].value);

    let isValid = true;

    if (!couponName) {
      displayErrorMessage(`couponNameError${couponId}`, "Coupon name is required");
      isValid = false;
    } else if (!/^[A-Za-z0-9 ]{3,50}$/.test(couponName)) {
      displayErrorMessage(`couponNameError${couponId}`, "Coupon name must be alphanumeric (3-50)");
      isValid = false;
    }

    if (!expireOn) {
      displayErrorMessage(`expireDateError${couponId}`, "Expire date is required");
      isValid = false;
    } else if (new Date(expireOn) <= new Date(createdOn)) {
      displayErrorMessage(`expireDateError${couponId}`, "Expire date must be after created date");
      isValid = false;
    }

    if (!discountType) {
      displayErrorMessage(`discountTypeError${couponId}`, "Please select a discount type");
      isValid = false;
    }

    if (discountType === "offerPrice") {
      if (isNaN(offerPrice) || offerPrice <= 0) {
        displayErrorMessage(`offerPriceError${couponId}`, "Offer price must be a positive number");
        isValid = false;
      }
    } else if (discountType === "offerPercentage") {
      if (isNaN(discountPercentage) || discountPercentage < 1 || discountPercentage > 99) {
        displayErrorMessage(`discountPercentageError${couponId}`, "Discount percentage must be between 1 and 99");
        isValid = false;
      }
      if (isNaN(maxDiscountAmount) || maxDiscountAmount <= 0) {
        displayErrorMessage(`maxDiscountAmountError${couponId}`, "Maximum discount must be a positive number");
        isValid = false;
      }
    }

    if (isNaN(minimumPrice) || minimumPrice <= 0) {
      displayErrorMessage(`minimumPriceError${couponId}`, "Minimum price must be positive");
      isValid = false;
    } else {
      if (discountType === "offerPercentage" && !isNaN(maxDiscountAmount) && minimumPrice < maxDiscountAmount) {
        displayErrorMessage(`minimumPriceError${couponId}`, "Minimum price cannot be less than max discount amount");
        isValid = false;
      }
      if (discountType === "offerPrice" && !isNaN(offerPrice) && minimumPrice < offerPrice) {
        displayErrorMessage(`minimumPriceError${couponId}`, "Minimum price cannot be less than offer price");
        isValid = false;
      }
    }

    return isValid;
  }

  // Edit Coupon form submission
  document.querySelectorAll(".edit-Coupon-form").forEach(form => {
    form.addEventListener("submit", function(event) {
      event.preventDefault();
      if (validateEditCouponForm(this)) {
        const couponId = this.getAttribute("data-id");
        const formData = new FormData(this);
        fetch(`/admin/coupon?id=${couponId}`, {
          method: "PUT",
          body: new URLSearchParams(formData),
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: "Success!",
              text: "Coupon updated successfully!",
              icon: "success",
              confirmButtonText: "Okay",
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              title: "Error",
              text: data.message,
              icon: "error",
              confirmButtonText: "Okay",
            });
          }
        })
        .catch(error => {
          console.error("Error updating coupon:", error);
          Swal.fire({
            title: "Error",
            text: "Failed to update coupon.",
            icon: "error",
            confirmButtonText: "Ok",
          });
        });
      }
    });
  });

  // Delete Coupon
  function confirmDelete(couponId) {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, delete it!",
    }).then(result => {
      if (result.isConfirmed) {
        deleteCoupon(couponId);
      }
    });
  }

  function deleteCoupon(couponId) {
    fetch(`/admin/coupon?id=${couponId}`, {
      method: "DELETE",
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          title: "Deleted!",
          text: "The coupon has been deleted.",
          icon: "success",
          confirmButtonText: "OK",
          timer: 1500,
          timerProgressBar: true
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire({
          title: "Error",
          text: data.message || "Failed to delete coupon.",
          icon: "error",
          confirmButtonText: "Ok",
        });
      }
    })
    .catch(error => {
      console.error("Error deleting coupon:", error);
      Swal.fire({
        title: "Error",
        text: "Failed to delete coupon.",
        icon: "error",
        confirmButtonText: "Ok",
      });
    });
  }

  // Initialize default start date and error elements
  document.addEventListener("DOMContentLoaded", function() {
    setDefaultStartDate();

    document.querySelectorAll(".edit-Coupon-form").forEach(form => {
      const fields = [
        { id: "couponName", name: "name" },
        { id: "couponCreateOn", name: "createdOn" },
        { id: "couponExpireOn", name: "expireOn" },
        { id: "discountType", name: "discountType" },
        { id: "offerPrice", name: "offerPrice" },
        { id: "discountPercentage", name: "discountPercentage" },
        { id: "maxDiscountAmount", name: "maxDiscountAmount" },
        { id: "minimumPrice", name: "minimumPrice" }
      ];
      fields.forEach(field => {
        const input = form.querySelector(`[name="${field.name}"]`);
        if (input && !input.nextElementSibling?.classList?.contains("editError-message")) {
          const errorElement = document.createElement("div");
          errorElement.className = "editError-message";
          errorElement.id = `${field.id}Error${form.getAttribute("data-id")}`;
          errorElement.style.color = "red";
          errorElement.style.marginTop = "5px";
          input.insertAdjacentElement("afterend", errorElement);
        }
      });
    });
  });
</script>

