<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>E-commerce Admin Dashboard</title>
  <link rel="stylesheet" href="/css/admin-style.css" />
  <link rel="stylesheet" href="/css/product-add.css" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet"/>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
</head>
<body>

  <%- include('../partials/admin/header') %>
  <% if (success_msg && success_msg.length > 0) { %>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      Swal.fire({
        icon: 'success',
        title: '<%= success_msg %>',
        showConfirmButton: false,
        timer: 1500
      });
    </script>
    <% } %>
    
    
  <!-- <% if(success_msg) { %>
    <div class="alert alert-success"><%= success_msg %></div>
  <% } %> -->
  <form class="add-product-form" method="POST" action="/admin/addProducts" onsubmit="return validateForm()" enctype="multipart/form-data">
    <h2>Add New Product</h2>

    <div class="form-group">
      <label for="name">Product Name</label>
      <input type="text" id="name" name="productName" required />
      <div id="name-error" class="error-message"></div>
    </div>

    <div class="form-group">
      <label for="brand">Brand</label>
      <select id="brand" name="brand" required>
        <% for(let i=0; i<brand.length; i++) { %>
          <option value="<%=brand[i].brandName%>"><%=brand[i].brandName%></option>
        <% } %>
      </select>
      <div id="brand-error" class="error-message"></div>
    </div>

    <div class="form-group">
      <label for="description">Full Description</label>
      <textarea id="description" name="description" rows="4" required></textarea>
      <div id="description-error" class="error-message"></div>
    </div>

    <div class="form-row">
      <div class="form-group">
        <label for="regularPrice">Regular Price</label>
        <input type="text" id="regularPrice" name="regularPrice" required />
        <div id="regularPrice-error" class="error-message"></div>
      </div>

      <div class="form-group">
        <label for="salePrice">Sale Price</label>
        <input type="text" id="salePrice" name="salePrice" />
        <div id="salePrice-error" class="error-message"></div>
      </div>

      <div class="form-group">
        <label for="quantity">Quantity</label>
        <input type="text" id="quantity" name="quantity" required />
        <div id="quantity-error" class="error-message"></div>
      </div>
    </div>

    <div class="form-group">
      <label for="color">Color</label>
      <input type="text" id="color" name="color" />
      <div id="color-error" class="error-message"></div>
    </div>

    <div class="form-group">
      <label for="category">Category</label>
      <select id="category" name="category" required>
        <% for(let i=0;i<cat.length;i++){ %>
          <option value="<%=cat[i].name%>"><%=cat[i].name%></option>
        <% } %>
      </select>
      <div id="category-error" class="error-message"></div>
    </div>

    <div class="row">
      <h5>Upload Product Images</h5>
      <% for (let i = 1; i <= 4; i++) { %>
        <div class="col-md-3">
          <div class="card-body p-2 d-flex flex-column align-items-center">
            <img src="" id="imgView<%= i %>" style="max-width: 100px; max-height: 100px;" />
            <input class="form-control form-control-sm imageInputs" type="file" 
              name="images" id="input<%= i %>" 
              accept="image/png, image/jpeg, image/jpg" 
              onchange="viewImage(event, '<%= i %>')" />
          </div>

          <div class="image-cropper d-flex flex-column align-items-center" id="cropperContainer<%= i %>" style="display: none;">
            <img id="croppedImg<%= i %>" style="width: 100px; height: 100px;" />
            <button type="button" id="saveButton<%= i %>" class="btn btn-sm btn-primary mt-2">Save</button>
          </div>
        </div>
      <% } %>
    </div>

    <div class="images-error" id="images-error" class="error-message"></div>

    <div class="button-group">
      <button type="submit" class="publish-btn" onclick="validateAndSubmit(event)">Publish</button>
    </div>
  </form>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

  <script>
    function validateAndSubmit(e) {
      e.preventDefault();
      if (validateForm()) {
        document.forms[0].submit();
      }
    }

    function viewImage(event, index) {
      const input = event.target;
      const image = document.getElementById('imgView' + index);
      const reader = new FileReader();

      reader.onload = function () {
        image.src = reader.result;

        const cropper = new Cropper(image, {
          aspectRatio: 1,
          viewMode: 1,
          guides: true,
          background: false,
          autoCropArea: 1,
          zoomable: true,
        });

        const cropperContainer = document.getElementById('cropperContainer' + index);
        cropperContainer.style.display = 'flex';

        const saveButton = document.getElementById('saveButton' + index);
        saveButton.onclick = function () {
          const croppedCanvas = cropper.getCroppedCanvas({ width: 440, height: 440 });

          const croppedImage = document.getElementById('croppedImg' + index);
          croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

          croppedCanvas.toBlob(blob => {
            const fileName = `cropped-${Date.now()}-${index}.jpg`;
            const newFile = new File([blob], fileName, { type: 'image/jpeg' });

            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(newFile);

            const inputField = document.getElementById('input' + index);
            inputField.files = dataTransfer.files;
          }, 'image/jpeg');

          cropper.destroy();
          cropperContainer.style.display = 'none';
        };
      };

      reader.readAsDataURL(input.files[0]);
    }

    function validateForm() {
      clearErrorMessages();
      let isValid = true;

      const name = document.getElementById('name').value.trim();
      if (!name || !/^[a-zA-Z0-9\s\-']{2,25}$/.test(name) || !/[a-zA-Z]/.test(name)  ) {
        displayErrorMessage('name-error', 'Product name must be 2–25 valid characters.');
        isValid = false;
      }

      const brand = document.getElementById('brand').value.trim();
      if (!brand) {
        displayErrorMessage('brand-error', 'Please select a brand.');
        isValid = false;
      }

      const description = document.getElementById('description').value.trim();
      if (!description || !/^[a-zA-Z0-9\s.,\-'!]{10,30}$/.test(description)) {
        displayErrorMessage('description-error', 'Enter 10–30 character description.');
        isValid = false;
      }

      const regularPrice = document.getElementById('regularPrice').value.trim();
      if (!regularPrice || !/^\d+(\.\d{1,2})?$/.test(regularPrice) || parseFloat(regularPrice) <= 0) {
        displayErrorMessage('regularPrice-error', 'Valid regular price required.');
        isValid = false;
      }

      const salePrice = document.getElementById('salePrice').value.trim();
      if (salePrice && (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) <= 0 || parseFloat(salePrice) > parseFloat(regularPrice))) {
        displayErrorMessage('salePrice-error', 'Valid sale price required.');
        isValid = false;
      }

      const quantity = document.getElementById('quantity').value.trim();
      if (!quantity || !/^\d+$/.test(quantity) || parseInt(quantity) <= 0) {
        displayErrorMessage('quantity-error', 'Enter valid quantity.');
        isValid = false;
      }

      const color = document.getElementById('color').value.trim();
      if (!color || !/^[a-zA-Z\s]{2,50}$/.test(color)) {
        displayErrorMessage('color-error', 'Enter valid color name.');
        isValid = false;
      }

      const category = document.getElementById('category').value.trim();
      if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
      }

      let hasImage = false;
      for (let i = 1; i <= 4; i++) {
        const input = document.getElementById(`input${i}`);
        if (input.files.length > 0) {
          hasImage = true;
          const file = input.files[0];
          const validTypes = ['image/png', 'image/jpeg', 'image/jpg'];
          if (!validTypes.includes(file.type)) {
            displayErrorMessage('images-error', `Image ${i} format is invalid.`);
            isValid = false;
          } else if (file.size > 5 * 1024 * 1024) {
            displayErrorMessage('images-error', `Image ${i} exceeds 5MB.`);
            isValid = false;
          }
        }
      }
      if (!hasImage) {
        displayErrorMessage('images-error', 'Upload at least one image.');
        isValid = false;
      }

      return isValid;
    }

    function displayErrorMessage(id, msg) {
      const element = document.getElementById(id);
      if (element) {
        element.innerText = msg;
        element.style.display = 'block';
        element.style.color = 'red';
        element.style.fontSize = '0.9em';
      }
    }

    function clearErrorMessages() {
      const errors = document.getElementsByClassName('error-message');
      Array.from(errors).forEach(e => { e.innerText = ''; e.style.display = 'none'; });
    }
  </script>

</body>
</html>
